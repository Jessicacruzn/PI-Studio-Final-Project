sessionInfo()
x1 = c(1,2,3); length(x1)
lines(y1,x1,col='red')
y1 = c(5,6,7)
lines(y1,x1,col='red')
plot(y1,x1)
library(tidyverse)
library(dplyr)
housing <- read_csv('https://econdata.s3-us-west-2.amazonaws.com/Reports/Core/RDC_Inventory_Core_Metrics_Zip_History.csv')
columns <- ncol(housing)
rows <- nrow(housing)
str(housing)
str(housing)[0]
type <- str(housing)
str(housing$month_date_yyyymm)
type <- str(housing$month_date_yyyymm)
type
head(housing)
summary(housing)
housing_dec_21 <- housing[housing$month_date_yyyymm == 202112]
housing_dec_21 <- housing[housing$month_date_yyyymm == 202112, ]
head(housing_dec_21)
plot(housing_dec_21$median_listing_price)
plot(housing_dec_21$median_listing_price, type = "h")
plot(housing_dec_21$median_days_on_market, type = "h")
housing_dec_21 %>%
group_by(median_listing_price) %>%
count() %>%
arrange(desc(n))
housing_dec_21 %>%
group_by(median_listing_price) %>%
count() %>%
arrange(n)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
plot(cars)
install.packages(c('flexdashboard', 'shiny', 'plotly', 'remotes', 'formattable', 'DT', 'lubridate', 'dygraphs', 'xts')
devtools::install_github("tylermorganwall/rayshader")
install.packages()
install.packages('devtools')
install.packages("devtools")
devtools::install_github("tylermorganwall/rayshader")
devtools::install_github("tylermorganwall/rayshader")
devtools::install_github("tylermorganwall/rayshader")
library(tidycensus)
library(tidyverse)
library(tidycensus)
library(tidyverse)
library(rayshader)
library(rayrender)
library(sf)
library(viridis)
library(units)
# Acquire Data
data <- get_acs(
variables = "B01001_001", geography = "tract", state = "NJ", survey = "acs5", year = 2019,
geometry = TRUE
) %>%
st_transform(3424)
data <- data %>%
mutate(
area = set_units(st_area(data), mi^2),
pop_density = as.numeric(estimate / area)
)
# Build Plot
plot <- data %>%
ggplot(aes(fill = pop_density)) +
geom_sf(color = NA) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt") +
theme(
axis.line = element_line(colour = "transparent"),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", colour = NA),
legend.text = element_text(color = "transparent"),
legend.title = element_text(color = "transparent"),
legend.position = "blank"
)
plot
# Render to 3D
plot_gg(plot,
width = 6, height = 6,
scale = 300,
multicore = TRUE,
fov = 60, theta = 270, phi = 25,
zoom = 0.20,
offset_edges = FALSE,
windowsize = c(4000, 4000)
)
library(tidycensus)
library(tidyverse)
library(rayshader)
library(rayrender)
library(sf)
library(viridis)
library(units)
# Acquire Data
data <- get_acs(
variables = "B01001_001", geography = "tract", state = "NJ", survey = "acs5", year = 2019,
geometry = TRUE
) %>%
st_transform(3424)
data <- data %>%
mutate(
area = set_units(st_area(data), mi^2),
pop_density = as.numeric(estimate / area)
)
# Build Plot
plot <- data %>%
ggplot(aes(fill = pop_density)) +
geom_sf(color = NA) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt") +
theme(
axis.line = element_line(colour = "transparent"),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", colour = NA),
legend.text = element_text(color = "transparent"),
legend.title = element_text(color = "transparent"),
legend.position = "blank"
)
plot
# Render to 3D
plot_gg(plot,
width = 6, height = 6,
scale = 300,
multicore = TRUE,
fov = 60, theta = 270, phi = 25,
zoom = 0.20,
offset_edges = FALSE,
windowsize = c(4000, 4000)
)
library(mlr)
library(xgboost)
library(modelStudio)
library(DALEX)
library(tidyverse)
setwd("~/PI Studio/PI-Studio-Final-Project/Dataset")
df <- read_csv('df_median.csv')
data <- select(df, -c('useful','latitude', 'longitude', 'business_id', 'comp_score')) %>%
rename(free_parking = `Free Parking`)
# normal model
model_classification <- glm(as.factor(is_open)~., data = data, family = "binomial")
summary(model_classification)
regression_table <- summary(model_classification)
View(regression_table)
write.table(regression_table, file = "regression.txt", sep = ",", quote = FALSE)
write.table(regression_table, file = "regression.txt", sep = ",", quote = FALSE, row.names = F)
table <- tidy(model_classification)
library(tidyr)
table <- tidy(model_classification)
